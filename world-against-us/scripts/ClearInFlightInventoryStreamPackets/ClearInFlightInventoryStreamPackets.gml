function ClearInFlightInventoryStreamPackets()
{
	// CONTAINER INVENTORY STREAM
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.REQUEST_CONTAINER_CONTENT);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.START_CONTAINER_INVENTORY_STREAM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_STREAM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.END_CONTAINER_INVENTORY_STREAM);
	// TODO: Block window closing, to prevent container inventory action interrupts while exhanging network acknowledgments
	// How about on disconnect?
	// CONTAINER INVENTORY ACTIONS
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_ADD_ITEM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_STACK_ITEM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_IDENTIFY_ITEM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_ROTATE_ITEM);
	global.NetworkHandlerRef.CancelPacketsSendQueueAndTrackingByMessageType(MESSAGE_TYPE.CONTAINER_INVENTORY_REMOVE_ITEM);
}